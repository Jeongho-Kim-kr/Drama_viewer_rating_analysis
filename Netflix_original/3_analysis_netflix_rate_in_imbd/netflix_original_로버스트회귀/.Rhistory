netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
par(mfrow = c(2,2)) # 한 화면에 여러 개의 그래프를 그려 비교하기 위해 par함수 사용
plot(fit_OLS_original) # fit_OLS_original의 그래프를 그려줌
fit_OLS_drama <- lm(All_rating ~ . , data=netflix_drama)
summary(fit_OLS_drama)
anova(fit_OLS_drama)
par(mfrow = c(2,2))
plot(fit_OLS_drama)
fit_OLS_movie <- lm(All_rating ~ . , data=netflix_movie)
summary(fit_OLS_movie)
anova(fit_OLS_movie)
par(mfrow = c(2,2))
plot(fit_OLS_movie)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
View(netflix_original)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
View(netflix_original)
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,20:24,27:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 14:22] <- lapply(netflix_drama[, 14:22], factor)
netflix_drama[, 1:13] <- lapply(netflix_drama[, 1:13], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
par(mfrow = c(2,2)) # 한 화면에 여러 개의 그래프를 그려 비교하기 위해 par함수 사용
plot(fit_OLS_original) # fit_OLS_original의 그래프를 그려줌
fit_OLS_drama <- lm(All_rating ~ . , data=netflix_drama)
summary(fit_OLS_drama)
anova(fit_OLS_drama)
par(mfrow = c(2,2))
plot(fit_OLS_drama)
par(mfrow = c(2,2))
plot(fit_OLS_drama)
fit_OLS_movie <- lm(All_rating ~ . , data=netflix_movie)
summary(fit_OLS_movie)
anova(fit_OLS_movie)
par(mfrow = c(2,2))
plot(fit_OLS_movie)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
View(fit_OLS_drama)
View(fit_OLS_movie)
View(netflix_drama)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,20:24,27:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 14:22] <- lapply(netflix_drama[, 14:22], factor)
netflix_drama[, 1:13] <- lapply(netflix_drama[, 1:13], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
View(netflix_movie)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,20:24,27:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 14:22] <- lapply(netflix_drama[, 14:22], factor)
netflix_drama[, 1:13] <- lapply(netflix_drama[, 1:13], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
par(mfrow = c(2,2)) # 한 화면에 여러 개의 그래프를 그려 비교하기 위해 par함수 사용
plot(fit_OLS_original) # fit_OLS_original의 그래프를 그려줌
fit_OLS_drama <- lm(All_rating ~ . , data=netflix_drama)
summary(fit_OLS_drama)
anova(fit_OLS_drama)
par(mfrow = c(2,2))
plot(fit_OLS_drama)
fit_OLS_movie <- lm(All_rating ~ . , data=netflix_movie)
summary(fit_OLS_movie)
anova(fit_OLS_movie)
par(mfrow = c(2,2))
plot(fit_OLS_movie)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
View(netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~  , data=netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
anova(fit_m_original)
fit_m_movie <- rlm(All_rating ~ . , data=netflix_movie)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm.folmula(All_rating ~ . , data=netflix_original)
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data = netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ Males_rating , data = netflix_original)
summary(fit_m_original) # MASS패키지의 함수인 rlm을 사용하여 로버스트 회귀분석 함.
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data = netflix_original)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data = netflix_original)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,20:24,27:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 14:22] <- lapply(netflix_drama[, 14:22], factor)
netflix_drama[, 1:13] <- lapply(netflix_drama[, 1:13], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data = netflix_original)
summary(fit_m_original) # MASS패키지의 함수인 rlm을 사용하여 로버스트 회귀분석 함.
anova(fit_m_original)
View(netflix_drama)
fit_m_drama <- rlm(All_rating ~ . , data=netflix_drama)
knitr::opts_chunk$set(echo = TRUE, comment=NA)
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,32:40)] # 엑셀에서 9,15,18 과 32~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 4:12] <- lapply(netflix_original[, 4:12], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:3] <- lapply(netflix_original[, 1:3], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,32:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 4:12] <- lapply(netflix_drama[, 4:12], factor)
netflix_drama[, 1:3] <- lapply(netflix_drama[, 1:3], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,32:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 4:12] <- lapply(netflix_movie[, 4:12], factor)
netflix_movie[, 1:3] <- lapply(netflix_movie[, 1:3], as.numeric)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp.reg)
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
knitr::opts_chunk$set(echo = TRUE, comment=NA)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,32:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 4:12] <- lapply(netflix_drama[, 4:12], factor)
netflix_drama[, 1:3] <- lapply(netflix_drama[, 1:3], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,32:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 4:12] <- lapply(netflix_movie[, 4:12], factor)
netflix_movie[, 1:3] <- lapply(netflix_movie[, 1:3], as.numeric)
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,32:40)] # 엑셀에서 9,15,18 과 32~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 4:12] <- lapply(netflix_original[, 4:12], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:3] <- lapply(netflix_original[, 1:3], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
# fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
# vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
View(netflix_original)
netflix_original <- netflix_original[,-6]
View(netflix_original)
netflix_drama <- netflix_drama[,-6]
View(netflix_drama)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
View(netflix_drama)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,32:40)] # 엑셀에서 9,15,18 과 32~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 4:12] <- lapply(netflix_original[, 4:12], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:3] <- lapply(netflix_original[, 1:3], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,32:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 4:12] <- lapply(netflix_drama[, 4:12], factor)
netflix_drama[, 1:3] <- lapply(netflix_drama[, 1:3], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,32:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 4:12] <- lapply(netflix_movie[, 4:12], factor)
netflix_movie[, 1:3] <- lapply(netflix_movie[, 1:3], as.numeric)
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
netflix_original <- netflix_original[,-6]
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
netflix_drama <- netflix_drama[,-6]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
View(netflix_drama)
netflix_movie <- netflix_movie[,-6]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_original) #lm :  linear regression의 핵심으로, 회귀분석, 단일 계층 분석, 공분산 분석에 이용할 수 있다.
cooks <- cooks.distance(fit_tmp) # 일반회귀를 통해 cooks 값을 구한다.
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance") # cooks 시각화
# plot() 함수는 x, y 인자 2개를 기본적으로 받습니다.
# cex : 기호의 크기를 지정할 때 사용 cex에 입력하는 숫자는 디폴트인 cex=1 대비 상대적인 크기를 나타냄.
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red") # 어떤 데이터인지 plot에 표시
outlier <- names(cooks)[(cooks > 4/nrow(netflix_original))] # outlier기준: 4/(sample size)를 넘는 cooks값을 가진 데이터
outlier <- as.integer(na.omit(outlier))
netflix_original <- netflix_original[-outlier, ] # oulier로 판정된 데이터 제거
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_drama))]
outlier <- as.integer(na.omit(outlier))
netflix_drama <- netflix_drama[-outlier, ]
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
cooks <- cooks.distance(fit_tmp)
plot(cooks, pch=".", cex=1.5, main = "Plot for Cook's Distance")
text(x=1:length(cooks), y=cooks, labels = ifelse(cooks > 4/nrow(netflix), names(cooks), ""), col = "red")
outlier <- names(cooks)[(cooks > 4/nrow(netflix_movie))]
outlier <- as.integer(na.omit(outlier))
netflix_movie <- netflix_movie[-outlier, ]
fit_OLS_original <- lm(All_rating ~ . , data=netflix_original)
summary(fit_OLS_original) # Summary() 함수는 중심화 경향과 퍼짐정도에 대해서 quick 하게 볼 수 있는 통계량들을 제공합니다.
anova(fit_OLS_original) # 유의한 factor를 확인하기 위해 ANOVA함수를 이용함
par(mfrow = c(2,2)) # 한 화면에 여러 개의 그래프를 그려 비교하기 위해 par함수 사용
plot(fit_OLS_original) # fit_OLS_original의 그래프를 그려줌
fit_OLS_drama <- lm(All_rating ~ . , data=netflix_drama)
summary(fit_OLS_drama)
anova(fit_OLS_drama)
par(mfrow = c(2,2))
plot(fit_OLS_drama)
fit_OLS_movie <- lm(All_rating ~ . , data=netflix_movie)
summary(fit_OLS_movie)
anova(fit_OLS_movie)
par(mfrow = c(2,2))
plot(fit_OLS_movie)
# 로버스트 회귀
library('MASS') # 로버스트 회귀를 위해 MASS 라이브러리 로드
fit_m_original <- rlm(All_rating ~ . , data=netflix_original)
summary(fit_m_original) # MASS패키지의 함수인 rlm을 사용하여 로버스트 회귀분석 함.
anova(fit_m_original)
par(mfrow = c(2,2))
plot(fit_m_original)
fit_m_movie <- rlm(All_rating ~ . , data=netflix_movie)
summary(fit_m_movie)
anova(fit_m_movie)
par(mfrow = c(2,2))
plot(fit_m_movie)
fit_tmp <- lm(All_rating ~ . , data=netflix_drama)
vif(fit_tmp)
knitr::opts_chunk$set(echo = TRUE, comment=NA)
rm(list=ls())
library(readxl) # readxl 패키지로 엑셀을 읽을 수 있게 해줌
netflix <- read_excel('netflix_original_종합_수정(sum)_(정량화보함).xlsx') # 넷플릭스 오리지널 엑셀데이터를 읽어옴
netflix_original <- netflix
netflix_original <- netflix_original[,c(9,15,18,20:24,27:40)] # 엑셀에서 9,15,18,20~24과 27~40번째 열을 가져오는 것.
netflix_original <- na.omit(netflix_original) # 어떤 결측치라도 있으면 행을 제거하고 남은 데이터를 반환
netflix_original[, 14:22] <- lapply(netflix_original[, 14:22], factor) # 위에서 뽑은 12개 열중 4~12열을 계산을 편하게 만들어주고 factor 형태로 만들어줌
netflix_original[, 1:13] <- lapply(netflix_original[, 1:13], as.numeric) # Mean_Length, Director_max_award, All_rating (1~3열) 항목을 숫자형으로 변환
netflix_drama <- netflix[1:170,]
netflix_drama <- netflix_drama[,c(9,15,18,20:24,27:40)]
netflix_drama <- na.omit(netflix_drama)
netflix_drama[, 14:22] <- lapply(netflix_drama[, 14:22], factor)
netflix_drama[, 1:13] <- lapply(netflix_drama[, 1:13], as.numeric)
netflix_movie <- netflix[171:589,]
netflix_movie <- netflix_movie[,c(9,15,18,20:24,27:40)]
netflix_movie <- na.omit(netflix_movie)
netflix_movie[, 14:22] <- lapply(netflix_movie[, 14:22], factor)
netflix_movie[, 1:13] <- lapply(netflix_movie[, 1:13], as.numeric)
library(car)
fit_tmp <- lm(All_rating ~ . , data=netflix_original)
vif(fit_tmp)
fit_tmp <- lm(All_rating ~ . , data=netflix_movie)
vif(fit_tmp)
